name: Update Academic Feed

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - 'config.yml'
      - 'src/**'

jobs:
  update-feed:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for committing changes
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper git operations
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Create directories
      run: |
        mkdir -p data output logs cache
    
    - name: Restore metadata cache
      uses: actions/cache@v3
      with:
        path: cache/
        key: toread-metadata-cache-v2-${{ hashFiles('data/paperpile_export.bib') }}
        restore-keys: |
          toread-metadata-cache-v2-
    
    - name: Download Paperpile export
      run: |
        # Download fresh BibTeX export from Paperpile
        if [ -z "${{ secrets.PAPERPILE_EXPORT_URL }}" ]; then
          echo "Error: PAPERPILE_EXPORT_URL secret is not configured"
          echo "Please add your Paperpile export URL as a GitHub secret"
          exit 1
        fi
        
        echo "Downloading BibTeX export from Paperpile..."
        curl -L "${{ secrets.PAPERPILE_EXPORT_URL }}" -o data/paperpile_export.bib
        
        if [ ! -f "data/paperpile_export.bib" ] || [ ! -s "data/paperpile_export.bib" ]; then
          echo "Error: Failed to download BibTeX file or file is empty"
          exit 1
        fi
        
        echo "Successfully downloaded BibTeX file ($(wc -l < data/paperpile_export.bib) lines)"
    
    - name: Update config with API key
      if: env.SEMANTIC_SCHOLAR_API_KEY != ''
      env:
        SEMANTIC_SCHOLAR_API_KEY: ${{ secrets.SEMANTIC_SCHOLAR_API_KEY }}
      run: |
        python -c "
        import yaml
        with open('config.yml', 'r') as f:
            config = yaml.safe_load(f)
        config['api']['semantic_scholar']['api_key'] = '${{ secrets.SEMANTIC_SCHOLAR_API_KEY }}'
        with open('config.yml', 'w') as f:
            yaml.dump(config, f, default_flow_style=False)
        "
    
    - name: Generate feeds (fast mode for scheduled runs)
      if: github.event_name == 'schedule'
      run: |
        echo "Running in fast mode for scheduled execution..."
        for i in {1..3}; do
          python -m src.main data/paperpile_export.bib -o output/ \
            --feed-title "To Read - Research Papers" \
            --feed-description "Academic papers from Paperpile enriched with metadata" \
            --rate-limit 3.0 --timeout 20 --skip-cached-enrichment && break
          echo "Attempt $i failed, retrying in 30s..."
          sleep 30
        done
    
    - name: Generate feeds (full enrichment)
      if: github.event_name != 'schedule'
      run: |
        echo "Running full enrichment for manual/push triggers..."
        for i in {1..3}; do
          python -m src.main data/paperpile_export.bib -o output/ \
            --feed-title "To Read - Research Papers" \
            --feed-description "Academic papers from Paperpile enriched with metadata" \
            --rate-limit 2.0 --timeout 30 && break
          echo "Attempt $i failed, retrying in 60s..."
          sleep 60
        done
    
    - name: Check for changes
      id: git-check
      run: |
        # Ensure output directory exists and add generated files
        mkdir -p output
        git add output/feed.json output/feed.xml 2>/dev/null || true
        
        # Check if there are any staged changes
        if git diff --staged --quiet; then
          echo "üìã No changes detected in feeds"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "üìã Changes detected in feeds"
          git diff --staged --name-only
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
        
        # Also check for any unstaged changes that might cause issues
        if ! git diff-index --quiet HEAD --; then
          echo "‚ö†Ô∏è  Warning: Unstaged changes detected"
          git status --short
        fi
    
    - name: Commit and push changes
      if: steps.git-check.outputs.changes == 'true'
      shell: bash
      run: |
        set +e  # Disable exit on error for retry logic
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "ü§ñ Update academic feeds - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Handle potential conflicts by pulling before pushing
        for i in {1..3}; do
          echo "Push attempt $i of 3..."
          if git push; then
            echo "‚úÖ Successfully pushed changes"
            exit 0
          else
            echo "‚ùå Push failed (attempt $i)"
            
            # Check if there are unstaged changes and stash them
            if ! git diff-index --quiet HEAD --; then
              echo "Stashing unstaged changes..."
              git stash push -m "Auto-stash before rebase attempt $i"
            fi
            
            echo "Fetching latest changes..."
            git fetch origin main
            
            echo "Attempting rebase..."
            if git rebase origin/main; then
              echo "‚úÖ Rebase successful"
              
              # Pop stash if we had one
              if git stash list | grep -q "Auto-stash before rebase attempt $i"; then
                echo "Restoring stashed changes..."
                git stash pop
              fi
            else
              echo "‚ùå Rebase failed, aborting and trying merge strategy..."
              git rebase --abort
              
              # Try merge instead of rebase
              if git merge origin/main -m "Merge latest changes from origin/main"; then
                echo "‚úÖ Merge successful"
              else
                echo "‚ùå Merge also failed"
                if [ $i -eq 3 ]; then
                  echo "üö® Failed to resolve conflicts after 3 attempts"
                  git status
                  exit 1
                fi
              fi
            fi
            
            # Wait before retry
            echo "Waiting 10 seconds before retry..."
            sleep 10
          fi
        done
        
        # If we get here, all attempts failed
        echo "üö® All push attempts failed"
        exit 1
    
    - name: Upload feeds as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: academic-feeds
        path: output/
        retention-days: 30